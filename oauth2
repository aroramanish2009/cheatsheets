oAuth2
====== 
Why: Was designed to solve the delegation problem. 
For Ex: Linkedin wants to access your contacts in gmail. Without oauth2 there is no mechanism to revoke the access, duration the access is granted for, access privilage like Read Only vs R/W and no way to figure out who accessed your account. 

Key oAuth2 Roles:
1. Resource owner: End-user whose credentials are being used. 
2. Client-Server: Application that is reuqesting access to 3rd party application. 
3. Resource-Server: 3rd party application that contains information that is required by the Client-Server. 
4. Authorization-Server: It provides Client-Server access to the resources on the resource server. 

Example of Linkedin access to Gmails contacts:
a. Client (Linkedin) requests authorization from the resource owner. 
b. Client requests the authorization server for a token, based on the grant flow.
c. Authorization server validates the grant and the client and provides the access token
d. Client uses this access token to access the resource(Gmail contacts)

5 Types:
a. Authorisation Code Grant : Used when signed into an Application using Facebook or Google Account. 
  - First Flow : Client-Server redirecting user to the Authorization-Server with parameters in the query string. Follwoing will be validated by Auth Server. 
    - response_type with the value code
    - client_id with the client identifier
    - redirect_uri with the client redirect URI. (optional, if missing then user will be redirected to pre-registered redirect url)
    - scope a space delimited list of scopes
    - state with a CSRF token. (optional but highly recommended) 
  - User will be asked to login to the auth server and approve the client. 
  - If approved, client will be sent to redirect_uri with 
    - code with the authorization code
    - state with the state parameter sent in the original request. The state value should be compared to confirm client app. 
  - Second Flow: The client-server will now send a POST request to the authorization server with the following parameters:
    - grant_type with the value of authorization_code
    - client_id with the client identifier
    - client_secret with the client secret
    - redirect_uri with the same redirect URI the user was redirect back to
    - code with the authorization code from the query string 
  - Authorization server reponds with a json object containing the following:
    - token_type this will usually be the word “Bearer”
    - expires_in with an integer representing the TTL of the access token
    - access_token the access token itself
    - refresh_token a refresh token that can be used to acquire a new access token when the original expires

b. Implicit grant : 2 differences, intended user-agent-based clients and secondly no Auth Code, Auth server returns access token. 
  - Client-Server redirect users to Authorization server with follwing:
    - response_type with the value token
    - redirect_uri
    - scope
    - state with a CSRF token
  - After all parameters are validated by Auth Server, user will then be asked to login to the Auther server and approve the client. [Kinda Paypal Redirect] 
    - token_type with the value Bearer
    - expires_in with an integer representing the TTL of the access token
    - access_token the access token itself
    - state
c. Resource owner credentials grant : This grant is a great user experience for trusted first party clients both on the web and in native device applications.
  - client then sends a POST request with following body parameters to the authorization server
    - grant_type with the value password
    - client_id with the the client’s ID
    - client_secret with the client’s secret
    - scope with a space-delimited list of requested scope permissions.
    - username with the user’s username
    - password with the user’s password
  - authorization server will respond with a JSON object containing the following properties
    - token_type with the value Bearer
    - expires_in TTL 
    - access_token
    - refresh_token
d. Client credentials grant : Simplest grant, machine-to-machine authentication where a specific user’s permission to access data is not required.
  client sends a POST request with following body parameters to the authorization server
c. Resource owner credentials grant : This grant is a great user experience for trusted first party clients both on the web and in native device applications.
  - client then sends a POST request with following body parameters to the authorization server
    - grant_type with the value password
    - client_id with the the client’s ID
    - client_secret with the client’s secret
    - scope with a space-delimited list of requested scope permissions.
    - username with the user’s username
    - password with the user’s password
  - authorization server will respond with a JSON object containing the following properties
    - token_type with the value Bearer
    - expires_in TTL 
    - access_token
    - refresh_token
d. Client credentials grant : Simplest grant, machine-to-machine authentication where a specific user’s permission to access data is not required.
  - client sends a POST request with following body parameters to the authorization server
    - grant_type with the value client_credentials
    - client_id with the the client’s ID
    - client_secret with the client’s secret
    - scope with a space-delimited list of requested scope permissions.
  - authorization server will respond with a JSON object containing the following properties:
    - token_type with the value Bearer
    - expires_in TTL 
    - access_token
e. Refresh token grant : Access tokens eventually expire; however some grants respond with a refresh token which enables the client to get a new access token without requiring the user to be redirected. Flow is similar to "d" above. 

Which OAuth 2.0 grant should I use?
If Access Token owner is a Machine --> Client credentials grant
If Access Token owner is a User Web App --> Authorisation Code Grant
If Access Token owner is a User Native App (Third Party) --> Authorisation Code Grant
If Access Token owner is a User Native App (First Party) --> Password Grant 
If Access Token owner is a User user-agent-based App (First Party) --> Password Grant
If Access Token owner is a User user-agent-based App (Third Party) --> Implicit Grant 
